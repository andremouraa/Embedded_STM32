
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800088c  08000894  00010894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800088c  0800088c  00010894  2**0
                  CONTENTS
  4 .ARM          00000000  0800088c  0800088c  00010894  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800088c  08000894  00010894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800088c  0800088c  0001088c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000890  08000890  00010890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010894  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000894  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000894  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010894  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000093f  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000228  00000000  00000000  00011203  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  00011430  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  000114f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000014e1  00000000  00000000  00011588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b0f  00000000  00000000  00012a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005aad  00000000  00000000  00013578  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00019025  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000024c  00000000  00000000  000190a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000874 	.word	0x08000874

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000874 	.word	0x08000874

08000204 <delay>:
 *      Author: Andre Moura
 */

#include "stm32f446xx.h"

void delay(void){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < 500000; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	0007a11f 	.word	0x0007a11f

08000230 <main>:

int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0

	// 1. Set the PA 5 configurations

	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOA;
 8000236:	4b19      	ldr	r3, [pc, #100]	; (800029c <main+0x6c>)
 8000238:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800023a:	2305      	movs	r3, #5
 800023c:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800023e:	2301      	movs	r3, #1
 8000240:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000242:	2300      	movs	r3, #0
 8000244:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000246:	2302      	movs	r3, #2
 8000248:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	4812      	ldr	r0, [pc, #72]	; (800029c <main+0x6c>)
 8000252:	f000 f851 	bl	80002f8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 8000256:	f107 030c 	add.w	r3, r7, #12
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f91a 	bl	8000494 <GPIO_Init>

	// 2. Set the PC 1 configurations

	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOC;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <main+0x70>)
 8000262:	603b      	str	r3, [r7, #0]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000264:	230d      	movs	r3, #13
 8000266:	713b      	strb	r3, [r7, #4]
	GpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INP;
 8000268:	2300      	movs	r3, #0
 800026a:	717b      	strb	r3, [r7, #5]
	GpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800026c:	2300      	movs	r3, #0
 800026e:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000270:	2101      	movs	r1, #1
 8000272:	480b      	ldr	r0, [pc, #44]	; (80002a0 <main+0x70>)
 8000274:	f000 f840 	bl	80002f8 <GPIO_PeriClockControl>
	GPIO_Init(&GpioButton);
 8000278:	463b      	mov	r3, r7
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f90a 	bl	8000494 <GPIO_Init>

	while(1){

		if (!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)))
 8000280:	210d      	movs	r1, #13
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <main+0x70>)
 8000284:	f000 faa4 	bl	80007d0 <GPIO_ReadFromInputPin>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1f8      	bne.n	8000280 <main+0x50>
		{
			GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
 800028e:	2105      	movs	r1, #5
 8000290:	4802      	ldr	r0, [pc, #8]	; (800029c <main+0x6c>)
 8000292:	f000 fab5 	bl	8000800 <GPIO_ToggleOutputPin>
			delay();
 8000296:	f7ff ffb5 	bl	8000204 <delay>
		if (!(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)))
 800029a:	e7f1      	b.n	8000280 <main+0x50>
 800029c:	40020000 	.word	0x40020000
 80002a0:	40020800 	.word	0x40020800

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490e      	ldr	r1, [pc, #56]	; (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0b      	ldr	r4, [pc, #44]	; (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 faab 	bl	800082c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ffab 	bl	8000230 <main>

080002da <LoopForever>:

LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000894 	.word	0x08000894
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC_IRQHandler>
	...

080002f8 <GPIO_PeriClockControl>:
 * @note			-
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
 8000300:	460b      	mov	r3, r1
 8000302:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000304:	78fb      	ldrb	r3, [r7, #3]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d157      	bne.n	80003ba <GPIO_PeriClockControl+0xc2>
		if (pGPIOx == GPIOA)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a59      	ldr	r2, [pc, #356]	; (8000474 <GPIO_PeriClockControl+0x17c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000312:	4b59      	ldr	r3, [pc, #356]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a58      	ldr	r2, [pc, #352]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}

	}
}
 800031e:	e0a3      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOB)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a56      	ldr	r2, [pc, #344]	; (800047c <GPIO_PeriClockControl+0x184>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000328:	4b53      	ldr	r3, [pc, #332]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a52      	ldr	r2, [pc, #328]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000334:	e098      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOC)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a51      	ldr	r2, [pc, #324]	; (8000480 <GPIO_PeriClockControl+0x188>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800033e:	4b4e      	ldr	r3, [pc, #312]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a4d      	ldr	r2, [pc, #308]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000344:	f043 0304 	orr.w	r3, r3, #4
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034a:	e08d      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOD)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a4d      	ldr	r2, [pc, #308]	; (8000484 <GPIO_PeriClockControl+0x18c>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000354:	4b48      	ldr	r3, [pc, #288]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a47      	ldr	r2, [pc, #284]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800035a:	f043 0308 	orr.w	r3, r3, #8
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e082      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOE)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a48      	ldr	r2, [pc, #288]	; (8000488 <GPIO_PeriClockControl+0x190>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800036a:	4b43      	ldr	r3, [pc, #268]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a42      	ldr	r2, [pc, #264]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000370:	f043 0310 	orr.w	r3, r3, #16
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e077      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOF)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a44      	ldr	r2, [pc, #272]	; (800048c <GPIO_PeriClockControl+0x194>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a3c      	ldr	r2, [pc, #240]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000386:	f043 0320 	orr.w	r3, r3, #32
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e06c      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOG)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a3f      	ldr	r2, [pc, #252]	; (8000490 <GPIO_PeriClockControl+0x198>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000396:	4b38      	ldr	r3, [pc, #224]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a37      	ldr	r2, [pc, #220]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800039c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e061      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOH)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a34      	ldr	r2, [pc, #208]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d15d      	bne.n	8000468 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80003ac:	4b32      	ldr	r3, [pc, #200]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a31      	ldr	r2, [pc, #196]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e056      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a2d      	ldr	r2, [pc, #180]	; (8000474 <GPIO_PeriClockControl+0x17c>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80003c2:	4b2d      	ldr	r3, [pc, #180]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a2c      	ldr	r2, [pc, #176]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003c8:	f023 0301 	bic.w	r3, r3, #1
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e04b      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOB)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a2a      	ldr	r2, [pc, #168]	; (800047c <GPIO_PeriClockControl+0x184>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80003d8:	4b27      	ldr	r3, [pc, #156]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a26      	ldr	r2, [pc, #152]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003de:	f023 0302 	bic.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e040      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOC)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a25      	ldr	r2, [pc, #148]	; (8000480 <GPIO_PeriClockControl+0x188>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003ee:	4b22      	ldr	r3, [pc, #136]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a21      	ldr	r2, [pc, #132]	; (8000478 <GPIO_PeriClockControl+0x180>)
 80003f4:	f023 0304 	bic.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e035      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOD)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a21      	ldr	r2, [pc, #132]	; (8000484 <GPIO_PeriClockControl+0x18c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800040a:	f023 0308 	bic.w	r3, r3, #8
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e02a      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <GPIO_PeriClockControl+0x190>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a16      	ldr	r2, [pc, #88]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000420:	f023 0310 	bic.w	r3, r3, #16
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e01f      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOF)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a18      	ldr	r2, [pc, #96]	; (800048c <GPIO_PeriClockControl+0x194>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a10      	ldr	r2, [pc, #64]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000436:	f023 0320 	bic.w	r3, r3, #32
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e014      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOG)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <GPIO_PeriClockControl+0x198>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800044c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e009      	b.n	8000468 <GPIO_PeriClockControl+0x170>
		} else if (pGPIOx == GPIOH)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a08      	ldr	r2, [pc, #32]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d105      	bne.n	8000468 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <GPIO_PeriClockControl+0x180>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a05      	ldr	r2, [pc, #20]	; (8000478 <GPIO_PeriClockControl+0x180>)
 8000462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40020000 	.word	0x40020000
 8000478:	40023800 	.word	0x40023800
 800047c:	40020400 	.word	0x40020400
 8000480:	40020800 	.word	0x40020800
 8000484:	40020c00 	.word	0x40020c00
 8000488:	40021000 	.word	0x40021000
 800048c:	40021400 	.word	0x40021400
 8000490:	40021800 	.word	0x40021800

08000494 <GPIO_Init>:
 *
 */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //Temporary register
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]

	//1. Configure the mode of GPIO pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) 											// Compare if is a Non-Interrupt Mode
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d820      	bhi.n	80004ea <GPIO_Init+0x56>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); 	// Shift the value of "PinMode" to the right position and store at "temp"
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	461a      	mov	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	fa02 f303 	lsl.w	r3, r2, r3
 80004b8:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));					// Cleaning the bits
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	2103      	movs	r1, #3
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	43db      	mvns	r3, r3
 80004ce:	4619      	mov	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	400a      	ands	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																		// Set the pin mode on the board
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6819      	ldr	r1, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	e0b2      	b.n	8000650 <GPIO_Init+0x1bc>

	} else
	{
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d117      	bne.n	8000522 <GPIO_Init+0x8e>
		{
			// 1. Configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f2:	4b9b      	ldr	r3, [pc, #620]	; (8000760 <GPIO_Init+0x2cc>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	4611      	mov	r1, r2
 8000502:	4a97      	ldr	r2, [pc, #604]	; (8000760 <GPIO_Init+0x2cc>)
 8000504:	430b      	orrs	r3, r1
 8000506:	60d3      	str	r3, [r2, #12]
			// 2. Clear the RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000508:	4b95      	ldr	r3, [pc, #596]	; (8000760 <GPIO_Init+0x2cc>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	7912      	ldrb	r2, [r2, #4]
 8000510:	4611      	mov	r1, r2
 8000512:	2201      	movs	r2, #1
 8000514:	408a      	lsls	r2, r1
 8000516:	43d2      	mvns	r2, r2
 8000518:	4611      	mov	r1, r2
 800051a:	4a91      	ldr	r2, [pc, #580]	; (8000760 <GPIO_Init+0x2cc>)
 800051c:	400b      	ands	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
 8000520:	e035      	b.n	800058e <GPIO_Init+0xfa>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	795b      	ldrb	r3, [r3, #5]
 8000526:	2b05      	cmp	r3, #5
 8000528:	d117      	bne.n	800055a <GPIO_Init+0xc6>
		{
			// 1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b8d      	ldr	r3, [pc, #564]	; (8000760 <GPIO_Init+0x2cc>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	4611      	mov	r1, r2
 800053a:	4a89      	ldr	r2, [pc, #548]	; (8000760 <GPIO_Init+0x2cc>)
 800053c:	430b      	orrs	r3, r1
 800053e:	6093      	str	r3, [r2, #8]
			// 2. Clear the FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000540:	4b87      	ldr	r3, [pc, #540]	; (8000760 <GPIO_Init+0x2cc>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	7912      	ldrb	r2, [r2, #4]
 8000548:	4611      	mov	r1, r2
 800054a:	2201      	movs	r2, #1
 800054c:	408a      	lsls	r2, r1
 800054e:	43d2      	mvns	r2, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a83      	ldr	r2, [pc, #524]	; (8000760 <GPIO_Init+0x2cc>)
 8000554:	400b      	ands	r3, r1
 8000556:	60d3      	str	r3, [r2, #12]
 8000558:	e019      	b.n	800058e <GPIO_Init+0xfa>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b06      	cmp	r3, #6
 8000560:	d115      	bne.n	800058e <GPIO_Init+0xfa>
		{
			// 1. Configure the FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <GPIO_Init+0x2cc>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	4611      	mov	r1, r2
 8000572:	4a7b      	ldr	r2, [pc, #492]	; (8000760 <GPIO_Init+0x2cc>)
 8000574:	430b      	orrs	r3, r1
 8000576:	6093      	str	r3, [r2, #8]
			// 2. Clear the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000578:	4b79      	ldr	r3, [pc, #484]	; (8000760 <GPIO_Init+0x2cc>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	7912      	ldrb	r2, [r2, #4]
 8000580:	4611      	mov	r1, r2
 8000582:	2201      	movs	r2, #1
 8000584:	408a      	lsls	r2, r1
 8000586:	4611      	mov	r1, r2
 8000588:	4a75      	ldr	r2, [pc, #468]	; (8000760 <GPIO_Init+0x2cc>)
 800058a:	430b      	orrs	r3, r1
 800058c:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR

		SYSCFG_PCLK_EN(); // Enable the SYSCFG clock
 800058e:	4b75      	ldr	r3, [pc, #468]	; (8000764 <GPIO_Init+0x2d0>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000592:	4a74      	ldr	r2, [pc, #464]	; (8000764 <GPIO_Init+0x2d0>)
 8000594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000598:	6453      	str	r3, [r2, #68]	; 0x44

		uint8_t GpioCode; //Create a variable to store the value of the GPIO used in the interruption

		GpioCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx); //Use a macro to use the right 4 bits value in the register
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a72      	ldr	r2, [pc, #456]	; (8000768 <GPIO_Init+0x2d4>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d032      	beq.n	800060a <GPIO_Init+0x176>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a70      	ldr	r2, [pc, #448]	; (800076c <GPIO_Init+0x2d8>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d02b      	beq.n	8000606 <GPIO_Init+0x172>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a6f      	ldr	r2, [pc, #444]	; (8000770 <GPIO_Init+0x2dc>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d024      	beq.n	8000602 <GPIO_Init+0x16e>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a6d      	ldr	r2, [pc, #436]	; (8000774 <GPIO_Init+0x2e0>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d01d      	beq.n	80005fe <GPIO_Init+0x16a>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a6c      	ldr	r2, [pc, #432]	; (8000778 <GPIO_Init+0x2e4>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d016      	beq.n	80005fa <GPIO_Init+0x166>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a6a      	ldr	r2, [pc, #424]	; (800077c <GPIO_Init+0x2e8>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d00f      	beq.n	80005f6 <GPIO_Init+0x162>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a69      	ldr	r2, [pc, #420]	; (8000780 <GPIO_Init+0x2ec>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d008      	beq.n	80005f2 <GPIO_Init+0x15e>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a5f      	ldr	r2, [pc, #380]	; (8000764 <GPIO_Init+0x2d0>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <GPIO_Init+0x15a>
 80005ea:	2307      	movs	r3, #7
 80005ec:	e00e      	b.n	800060c <GPIO_Init+0x178>
 80005ee:	2300      	movs	r3, #0
 80005f0:	e00c      	b.n	800060c <GPIO_Init+0x178>
 80005f2:	2306      	movs	r3, #6
 80005f4:	e00a      	b.n	800060c <GPIO_Init+0x178>
 80005f6:	2305      	movs	r3, #5
 80005f8:	e008      	b.n	800060c <GPIO_Init+0x178>
 80005fa:	2304      	movs	r3, #4
 80005fc:	e006      	b.n	800060c <GPIO_Init+0x178>
 80005fe:	2303      	movs	r3, #3
 8000600:	e004      	b.n	800060c <GPIO_Init+0x178>
 8000602:	2302      	movs	r3, #2
 8000604:	e002      	b.n	800060c <GPIO_Init+0x178>
 8000606:	2301      	movs	r3, #1
 8000608:	e000      	b.n	800060c <GPIO_Init+0x178>
 800060a:	2300      	movs	r3, #0
 800060c:	72fb      	strb	r3, [r7, #11]

		SYSCFG->EXTICR[(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4)] |= (GpioCode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 800060e:	4a5d      	ldr	r2, [pc, #372]	; (8000784 <GPIO_Init+0x2f0>)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	791b      	ldrb	r3, [r3, #4]
 8000614:	089b      	lsrs	r3, r3, #2
 8000616:	b2d8      	uxtb	r0, r3
 8000618:	4603      	mov	r3, r0
 800061a:	3302      	adds	r3, #2
 800061c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000620:	7af9      	ldrb	r1, [r7, #11]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	7912      	ldrb	r2, [r2, #4]
 8000626:	f002 0203 	and.w	r2, r2, #3
 800062a:	0092      	lsls	r2, r2, #2
 800062c:	fa01 f202 	lsl.w	r2, r1, r2
 8000630:	4954      	ldr	r1, [pc, #336]	; (8000784 <GPIO_Init+0x2f0>)
 8000632:	431a      	orrs	r2, r3
 8000634:	1c83      	adds	r3, r0, #2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063a:	4b49      	ldr	r3, [pc, #292]	; (8000760 <GPIO_Init+0x2cc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	4611      	mov	r1, r2
 800064a:	4a45      	ldr	r2, [pc, #276]	; (8000760 <GPIO_Init+0x2cc>)
 800064c:	430b      	orrs	r3, r1
 800064e:	6013      	str	r3, [r2, #0]

	}

	temp = 0;																									// Reset the "temp" variable
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); 		// Shift the value of "PinSpeed" to the right position and store at "temp"
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	799b      	ldrb	r3, [r3, #6]
 8000658:	461a      	mov	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));					// Cleaning the bits
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689a      	ldr	r2, [r3, #8]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	2103      	movs	r1, #3
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	43db      	mvns	r3, r3
 800067a:	4619      	mov	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	400a      	ands	r2, r1
 8000682:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;																		// Set the pin speed on the board
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6899      	ldr	r1, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	430a      	orrs	r2, r1
 8000692:	609a      	str	r2, [r3, #8]

	temp = 0;																									// Reset the "temp" variable
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]

	//3. Configure the PuPd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));// Shift the value of "PinPuPd" to the right position and store at "temp"
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	79db      	ldrb	r3, [r3, #7]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));						// Cleaning the bits
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68da      	ldr	r2, [r3, #12]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	2103      	movs	r1, #3
 80006b8:	fa01 f303 	lsl.w	r3, r1, r3
 80006bc:	43db      	mvns	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	400a      	ands	r2, r1
 80006c6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;																			// Set the pin PUPD on the board
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68d9      	ldr	r1, [r3, #12]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	430a      	orrs	r2, r1
 80006d6:	60da      	str	r2, [r3, #12]

	temp = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]

	//4. Configure the OutType
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);			// Shift the value of "PinOPType" to the right position and store at "temp"
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7a1b      	ldrb	r3, [r3, #8]
 80006e0:	461a      	mov	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);							// Cleaning the bits
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	4619      	mov	r1, r3
 80006f8:	2301      	movs	r3, #1
 80006fa:	408b      	lsls	r3, r1
 80006fc:	43db      	mvns	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	400a      	ands	r2, r1
 8000706:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER = temp;																			// Set the pin output type on the board
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	68fa      	ldr	r2, [r7, #12]
 800070e:	605a      	str	r2, [r3, #4]

	temp = 0;																									// Reset the "temp" variable
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]

	//5. Configure the Alternate funcionality

	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d153      	bne.n	80007c4 <GPIO_Init+0x330>
		{
			if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= GPIO_PIN_NO_7)												// Compare if the pin number is equal or below 7
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	2b07      	cmp	r3, #7
 8000722:	d831      	bhi.n	8000788 <GPIO_Init+0x2f4>
			{
				temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));	//Shift the value of "PinAltFunMode" to the right position and store at "temp"
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7a5b      	ldrb	r3, [r3, #9]
 8000728:	461a      	mov	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFR[0] &= ~(15 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); 		// Cleaning the bits
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6a1a      	ldr	r2, [r3, #32]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	210f      	movs	r1, #15
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	400a      	ands	r2, r1
 8000752:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFR[0] = temp;																// Set the Af on the board
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	621a      	str	r2, [r3, #32]
				pGPIOHandle->pGPIOx->AFR[1] &= ~(15 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));	// Cleaning the bits
				pGPIOHandle->pGPIOx->AFR[1] = temp;																// Set the Af on the board
			}
		}

}
 800075c:	e032      	b.n	80007c4 <GPIO_Init+0x330>
 800075e:	bf00      	nop
 8000760:	40013c00 	.word	0x40013c00
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40021000 	.word	0x40021000
 800077c:	40021400 	.word	0x40021400
 8000780:	40021800 	.word	0x40021800
 8000784:	40013800 	.word	0x40013800
				temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8))); //Shift the value of "PinAltFunMode" to the right position and store at "temp"
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7a5b      	ldrb	r3, [r3, #9]
 800078c:	461a      	mov	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	791b      	ldrb	r3, [r3, #4]
 8000792:	3b08      	subs	r3, #8
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	60fb      	str	r3, [r7, #12]
				pGPIOHandle->pGPIOx->AFR[1] &= ~(15 << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8));	// Cleaning the bits
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	3b02      	subs	r3, #2
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	210f      	movs	r1, #15
 80007ac:	fa01 f303 	lsl.w	r3, r1, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	4619      	mov	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	400a      	ands	r2, r1
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
				pGPIOHandle->pGPIOx->AFR[1] = temp;																// Set the Af on the board
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <GPIO_ReadFromInputPin>:
 * @note			- none
 *
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 1);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	691a      	ldr	r2, [r3, #16]
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	fa22 f303 	lsr.w	r3, r2, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	73fb      	strb	r3, [r7, #15]
	return value;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <GPIO_ToggleOutputPin>:
 * @note			- none
 *
 */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	78fa      	ldrb	r2, [r7, #3]
 8000812:	2101      	movs	r1, #1
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	405a      	eors	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	615a      	str	r2, [r3, #20]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <__libc_init_array>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	4e0d      	ldr	r6, [pc, #52]	; (8000864 <__libc_init_array+0x38>)
 8000830:	4c0d      	ldr	r4, [pc, #52]	; (8000868 <__libc_init_array+0x3c>)
 8000832:	1ba4      	subs	r4, r4, r6
 8000834:	10a4      	asrs	r4, r4, #2
 8000836:	2500      	movs	r5, #0
 8000838:	42a5      	cmp	r5, r4
 800083a:	d109      	bne.n	8000850 <__libc_init_array+0x24>
 800083c:	4e0b      	ldr	r6, [pc, #44]	; (800086c <__libc_init_array+0x40>)
 800083e:	4c0c      	ldr	r4, [pc, #48]	; (8000870 <__libc_init_array+0x44>)
 8000840:	f000 f818 	bl	8000874 <_init>
 8000844:	1ba4      	subs	r4, r4, r6
 8000846:	10a4      	asrs	r4, r4, #2
 8000848:	2500      	movs	r5, #0
 800084a:	42a5      	cmp	r5, r4
 800084c:	d105      	bne.n	800085a <__libc_init_array+0x2e>
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000854:	4798      	blx	r3
 8000856:	3501      	adds	r5, #1
 8000858:	e7ee      	b.n	8000838 <__libc_init_array+0xc>
 800085a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800085e:	4798      	blx	r3
 8000860:	3501      	adds	r5, #1
 8000862:	e7f2      	b.n	800084a <__libc_init_array+0x1e>
 8000864:	0800088c 	.word	0x0800088c
 8000868:	0800088c 	.word	0x0800088c
 800086c:	0800088c 	.word	0x0800088c
 8000870:	08000890 	.word	0x08000890

08000874 <_init>:
 8000874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000876:	bf00      	nop
 8000878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800087a:	bc08      	pop	{r3}
 800087c:	469e      	mov	lr, r3
 800087e:	4770      	bx	lr

08000880 <_fini>:
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	bf00      	nop
 8000884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000886:	bc08      	pop	{r3}
 8000888:	469e      	mov	lr, r3
 800088a:	4770      	bx	lr

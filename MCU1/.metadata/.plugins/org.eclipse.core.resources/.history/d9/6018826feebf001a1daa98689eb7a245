/*
 * stm32f446xx_spi_driver.c
 *
 *  Created on: Jul 06, 2020
 *      Author: Andre Moura
 */

#include "stm32f446xx.h"
#include "stm32f446xx_spi_driver.h"

// Clock Setup

/****************************************************
 * @fn				- SPI_PeriClockControl
 *
 * @brief			- This function enables or disables peripheral clock for the given SPI bus
 *
 * @param[in] 		- Base address of the SPI peripheral
 * @param[in]		- ENABLE or DISABLE macros
 * @param[in]		-
 *
 * @return			-
 *
 * @note			-
 *
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);

// Init and De-Init

/****************************************************
 * @fn				- SPI_Init
 *
 * @brief			- This function initialize the given SPI bus and set the needed parameters
 *
 * @param[in] 		- The Struct SPI_Handle
 * @param[in]		-
 * @param[in]		-
 *
 * @return			- none
 *
 * @note			- none
 *
 */

void SPI_Init(SPI_Handle_t *pSPIHandle);


/****************************************************
 * @fn				- GPIO_DeInit
 *
 * @brief			- This function reset all the registers of a SPI bus
 *
 * @param[in] 		- Base address of the SPI peripheral
 * @param[in]		-
 * @param[in]		-
 *
 * @return			- none
 *
 * @note			- none
 *
 */

void SPI_DeInit(SPI_RegDef_t *pSPIx);

/****************************************************
 * @fn				- SPI_SendData
 *
 * @brief			- This function sends data through SPI bus
 *
 * @param[in] 		- Base address of the SPI peripheral
 * @param[in]		- Base address of the SPI Transmitter Buffer
 * @param[in]		- The length of the data
 *
 * @return			- none
 *
 * @note			- none
 *
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);

/****************************************************
 * @fn				- SPI_SendData
 *
 * @brief			- This function receives data through SPI bus
 *
 * @param[in] 		- Base address of the SPI peripheral
 * @param[in]		- Base address of the SPI Receiver Buffer
 * @param[in]		- The length of the data
 *
 * @return			- none
 *
 * @note			- none
 *
 */

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);




